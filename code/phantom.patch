diff --git a/src/main/dust.F90 b/src/main/dust.F90
index 77510a17..4c59351b 100644
--- a/src/main/dust.F90
+++ b/src/main/dust.F90
@@ -31,18 +31,18 @@
 !--------------------------------------------------------------------------
 
 module dust
- use dim,     only:use_dustgrowth
+ use dim,     only:use_dustgrowth,maxdusttypes
  use part,    only:ndusttypes,grainsize,graindens
  use physcon, only:pi
  use units,   only:umass,udist
  implicit none
  !--Default values for the dust in the infile
- real,    public  :: K_code            = 1.
- real,    public  :: grainsizecgs      = 0.1
- real,    public  :: graindenscgs      = 3.
- integer, public  :: idrag             = 1
- integer, public  :: icut_backreaction = 0
- logical, public  :: ilimitdustflux    = .false. ! to limit spurious dust generation in outer disc
+ real,    public  :: K_code(maxdusttypes) = 1.
+ real,    public  :: grainsizecgs         = 0.1
+ real,    public  :: graindenscgs         = 3.
+ integer, public  :: idrag                = 1
+ integer, public  :: icut_backreaction    = 0
+ logical, public  :: ilimitdustflux       = .false. ! to limit spurious dust generation in outer disc
 
  public :: get_ts
  public :: init_drag
@@ -67,6 +67,7 @@ subroutine init_drag(ierr)
  integer, intent(out) :: ierr
  real    :: cste_seff
  real    :: mass_mol_gas, cross_section_gas
+ integer :: i
 
  ierr = 0
  !--compute constants which are used in the ts calculation
@@ -80,10 +81,12 @@ subroutine init_drag(ierr)
  select case(idrag)
  case(2,3)
     !--check the value of K_code
-    if (K_code < 0.) then
-       call error('init_drag','K_code < 0',var='K_code',val=K_code)
-       ierr = 4
-    endif
+    do i=1,maxdusttypes
+       if (K_code(i) < 0.) then
+          call error('init_drag','K_code < 0',var='K_code',val=K_code(i))
+          ierr = 4
+       endif
+    enddo
  case default
  end select
 
@@ -135,9 +138,13 @@ subroutine print_dustinfo(iprint)
                                            ' g/cm^3 = ',rhocrit,' (code units)'
     endif
  case(2)
-    write(iprint,"(/,a,1pg12.5)") ' Using K=const drag with K = ',K_code
+    do i=1,ndusttypes
+       write(iprint,"(/,a,1pg12.5)") ' Using K=const drag with K = ',K_code(i)
+    enddo
  case(3)
-    write(iprint,"(/,a,1pg12.5)") ' Using ts=const drag with ts = ',K_code
+    do i=1,ndusttypes
+       write(iprint,"(/,a,1pg12.5)") ' Using ts=const drag with ts = ',K_code(i)
+    enddo
  case default
     write(iprint,"(/,a)") ' Drag regime not set'
  end select
@@ -153,9 +160,9 @@ end subroutine print_dustinfo
 !  idrag = 2 : const K
 !+
 !--------------------------------------------------------------------------
-subroutine get_ts(idrag,sgrain,densgrain,rhogas,rhodust,spsoundgas,dv2, &
+subroutine get_ts(idrag,idust,sgrain,densgrain,rhogas,rhodust,spsoundgas,dv2, &
                   ts,iregime)
- integer, intent(in)  :: idrag
+ integer, intent(in)  :: idrag,idust
  integer, intent(out) :: iregime
  real,    intent(in)  :: sgrain,densgrain,rhogas,rhodust,spsoundgas,dv2
  real,    intent(out) :: ts
@@ -249,10 +256,8 @@ subroutine get_ts(idrag,sgrain,densgrain,rhogas,rhodust,spsoundgas,dv2, &
     !
     ! constant drag coefficient
     !
-    if (K_code > 0.) then
-       ! WARNING! When ndusttypes > 1, K_code ONLY makes sense
-       ! if all of the grains are identical to one another.
-       ts = rhogas*rhodust/(K_code*rhosum)
+    if (K_code(idust) > 0.) then
+       ts = rhogas*rhodust/(K_code(idust)*rhosum)
     else
        ts = huge(ts)
     endif
@@ -262,7 +267,7 @@ subroutine get_ts(idrag,sgrain,densgrain,rhogas,rhodust,spsoundgas,dv2, &
     !
     ! constant ts
     !
-    ts = K_code
+    ts = K_code(idust)
     iregime = 0
 
  case default
@@ -278,11 +283,14 @@ end subroutine get_ts
 !+
 !--------------------------------------------------------------------------
 subroutine write_options_dust(iunit)
+ use fileutils,    only:make_tags_unique
  use infile_utils, only:write_inopt
  use io,           only:warning
  use options,      only:use_dustfrac
  integer, intent(in) :: iunit
  character(len=10)   :: numdust
+ character(len=20)   :: duststring(maxdusttypes)
+ integer             :: i
 
  write(numdust,'(I10)') ndusttypes
  write(iunit,"(/,a)") '# options controlling dust ('//trim(adjustl(numdust))//' dust species)'
@@ -300,7 +308,15 @@ subroutine write_options_dust(iunit)
        call write_inopt(graindenscgs,'graindens','Intrinsic grain density in g/cm^3',iunit)
     endif
  case(2,3)
-    call write_inopt(K_code,'K_code','drag constant when constant drag is used',iunit)
+    if (ndusttypes > 1) then
+       duststring='K_code'
+       call make_tags_unique(ndusttypes,duststring)
+       do i=1,ndusttypes
+          call write_inopt(K_code(i),duststring(i),'drag constant when constant drag is used',iunit)
+       enddo
+    else
+       call write_inopt(K_code(1),'K_code','drag constant when constant drag is used',iunit)
+    endif
  end select
 
  call write_inopt(icut_backreaction,'icut_backreaction','cut the drag on the gas phase (0=no, 1=yes)',iunit)
@@ -329,6 +345,8 @@ subroutine read_options_dust(name,valstring,imatch,igotall,ierr)
                        iKcode        = 5
  integer, save :: igot(nvalues) = 0
  integer       :: ineed(nvalues)
+ integer       :: int
+ character(len=10) :: str
 
  imatch  = .true.
  igotall = .false.
@@ -346,7 +364,7 @@ subroutine read_options_dust(name,valstring,imatch,igotall,ierr)
     graindens(1) = graindenscgs/udens
     !--no longer a compulsory parameter
  case('K_code')
-    read(valstring,*,iostat=ierr) K_code
+    read(valstring,*,iostat=ierr) K_code(1)
     igot(iKcode) = 1
  case('icut_backreaction')
     read(valstring,*,iostat=ierr) icut_backreaction
@@ -358,6 +376,14 @@ subroutine read_options_dust(name,valstring,imatch,igotall,ierr)
     imatch = .false.
  end select
 
+ if (name(1:6) == 'K_code') then
+    str = trim(name(7:len(name)))
+    read(str,*,iostat=ierr) int
+    read(valstring,*,iostat=ierr) K_code(int)
+    igot(iKcode) = 1
+    imatch = .true.
+ endif
+
  ineed = 0
 
  !--Parameters needed by all combinations
diff --git a/src/main/energies.F90 b/src/main/energies.F90
index 5615a5bf..cbc99f62 100644
--- a/src/main/energies.F90
+++ b/src/main/energies.F90
@@ -333,7 +333,7 @@ subroutine compute_energies(t)
           if (use_dustfrac) then
              rhogasi = rhoi*gasfrac
              do j=1,ndustsmall
-                call get_ts(idrag,grainsize(j),graindens(j),rhogasi,rhoi*dustfracisum,spsoundi,0.,tsi(j),iregime)
+                call get_ts(idrag,j,grainsize(j),graindens(j),rhogasi,rhoi*dustfracisum,spsoundi,0.,tsi(j),iregime)
                 call ev_data_update(ev_data_thread,iev_ts,tsi(j))
              enddo
           endif
diff --git a/src/main/force.F90 b/src/main/force.F90
index b49967b6..ce25c284 100644
--- a/src/main/force.F90
+++ b/src/main/force.F90
@@ -1441,7 +1441,7 @@ subroutine compute_forces(i,iamgasi,iamdusti,xpartveci,hi,hi1,hi21,hi41,gradhi,g
              tsj = 0.
              do l=1,ndustsmall
                 ! get stopping time - for one fluid dust we do not know deltav, but it is small by definition
-                call get_ts(idrag,grainsize(l),graindens(l),rhogasj,rhoj*dustfracjsum,spsoundj,0.,tsj(l),iregime)
+                call get_ts(idrag,l,grainsize(l),graindens(l),rhogasj,rhoj*dustfracjsum,spsoundj,0.,tsj(l),iregime)
              enddo
              if (ilimitdustflux) tsj(:)   = min(tsj(:),hj/spsoundj) ! flux limiter from Ballabio et al. (2018)
              epstsj   = sum(dustfracj(:)*tsj(:))
@@ -1541,11 +1541,11 @@ subroutine compute_forces(i,iamgasi,iamdusti,xpartveci,hi,hi1,hi21,hi41,gradhi,g
                    wdrag = wkern_drag(q2j,qj)*hj21*hj1*cnormk_drag
                 endif
                 if (use_dustgrowth) then
-                   call get_ts(idrag,dustprop(1,j),dustprop(2,j),rhoi,rhoj,spsoundi,dv2,tsijtmp,iregime)
+                   call get_ts(idrag,1,dustprop(1,j),dustprop(2,j),rhoi,rhoj,spsoundi,dv2,tsijtmp,iregime)
                 else
                    !--the following works for large grains only (not hybrid large and small grains)
                    idusttype = iamtypej - idust + 1
-                   call get_ts(idrag,grainsize(idusttype),graindens(idusttype),rhoi,rhoj,spsoundi,dv2,tsijtmp,iregime)
+                   call get_ts(idrag,idusttype,grainsize(idusttype),graindens(idusttype),rhoi,rhoj,spsoundi,dv2,tsijtmp,iregime)
                 endif
                 ndrag = ndrag + 1
                 if (iregime > 2)  nstokes = nstokes + 1
@@ -1569,7 +1569,7 @@ subroutine compute_forces(i,iamgasi,iamdusti,xpartveci,hi,hi1,hi21,hi41,gradhi,g
                    wdrag = wkern_drag(q2j,qj)*hj21*hj1*cnormk_drag
                 endif
                 if (use_dustgrowth) then
-                   call get_ts(idrag,grainsizei,graindensi,rhoj,rhoi,spsoundj,dv2,tsijtmp,iregime)
+                   call get_ts(idrag,1,grainsizei,graindensi,rhoj,rhoi,spsoundj,dv2,tsijtmp,iregime)
 #ifdef DUSTGROWTH
                    if (q2i < q2j) then
                       winter = wkern(q2i,qi)*hi21*hi1*cnormk
@@ -1585,7 +1585,7 @@ subroutine compute_forces(i,iamgasi,iamdusti,xpartveci,hi,hi1,hi21,hi41,gradhi,g
                 else
                    !--the following works for large grains only (not hybrid large and small grains)
                    idusttype = iamtypei - idust + 1
-                   call get_ts(idrag,grainsize(idusttype),graindens(idusttype),rhoj,rhoi,spsoundj,dv2,tsijtmp,iregime)
+                   call get_ts(idrag,idusttype,grainsize(idusttype),graindens(idusttype),rhoj,rhoi,spsoundj,dv2,tsijtmp,iregime)
                 endif
                 dragterm = 3.*pmassj/((rhoi + rhoj)*tsijtmp)*projvstar*wdrag
                 ts_min = min(ts_min,tsijtmp)
@@ -1925,7 +1925,7 @@ subroutine start_cell(cell,iphase,xyzh,vxyzu,gradh,divcurlv,divcurlB,dvdx,Bevol,
        if (use_dustfrac .and. iamgasi) then
           tstopi = 0.
           do j=1,ndustsmall
-             call get_ts(idrag,grainsize(j),graindens(j),rhogasi,rhoi*dustfracisum,spsoundi,0.,tstopi(j),iregime)
+             call get_ts(idrag,j,grainsize(j),graindens(j),rhogasi,rhoi*dustfracisum,spsoundi,0.,tstopi(j),iregime)
           enddo
        endif
 #endif
@@ -2598,7 +2598,7 @@ subroutine finish_cell_and_store_results(icall,cell,fxyzu,xyzh,vxyzu,poten,dt,dv
           rhoi             = xpartveci(irhoi)
           gdensi           = xpartveci(igraindensi)
           gsizei           = xpartveci(igrainsizei)
-          call get_ts(idrag,gsizei,gdensi,dustgasprop(2,i),rhoi,dustgasprop(1,i),&
+          call get_ts(idrag,1,gsizei,gdensi,dustgasprop(2,i),rhoi,dustgasprop(1,i),&
                dustgasprop(4,i)**2,tstopint,ireg)
           dustgasprop(3,i) = tstopint * Omega_k(i) !- Stokes number
        endif
diff --git a/src/setup/set_dust_options.f90 b/src/setup/set_dust_options.f90
index 27bf8773..c7271e01 100644
--- a/src/setup/set_dust_options.f90
+++ b/src/setup/set_dust_options.f90
@@ -325,7 +325,7 @@ subroutine check_dust_method(dust_method,ichange_method)
        spsoundi     = get_spsound(ieos,xyzh(:,i),rhogasi,vxyzu(:,i))
        do l=1,ndusttypesinp
           rhodusti = rhoi*dustfraci(l)
-          call get_ts(idrag,grainsize(l),graindens(l),rhogasi,rhodusti,spsoundi,0.,tsi(l),iregime)
+          call get_ts(idrag,l,grainsize(l),graindens(l),rhogasi,rhodusti,spsoundi,0.,tsi(l),iregime)
           if (tsi(l) > xyzh(4,i)/spsoundi) icheckdust(l) = icheckdust(l) + 1
        enddo
     endif
diff --git a/src/setup/setup_dustsettle.f90 b/src/setup/setup_dustsettle.f90
index d166bfb1..2f63f515 100644
--- a/src/setup/setup_dustsettle.f90
+++ b/src/setup/setup_dustsettle.f90
@@ -161,7 +161,7 @@ subroutine setpart(id,npart,npartoftype,xyzh,massoftype,vxyzu,polyk,gamma,hfact,
 !
  call init_drag(ierr)
  do i=1,ndustsmall
-    call get_ts(idrag,grainsize(i),graindens(i),rhozero,0.0*rhozero,cs,0.,ts(i),iregime)
+    call get_ts(idrag,i,grainsize(i),graindens(i),rhozero,0.0*rhozero,cs,0.,ts(i),iregime)
     print*,'s (cm) =',grainsize(i),'   ','St = ts * Omega =',ts(i)*omega
  enddo
 !
diff --git a/src/setup/setup_dustybox.f90 b/src/setup/setup_dustybox.f90
index f44574e1..58f3475a 100644
--- a/src/setup/setup_dustybox.f90
+++ b/src/setup/setup_dustybox.f90
@@ -139,7 +139,7 @@ subroutine setpart(id,npart,npartoftype,xyzh,massoftype,vxyzu,polyk,gamma,hfact,
           endif
        endif
     case(2)
-       call set_unifdis('closepacked',id,master,xmin,xmax,ymin,ymax,zmin,zmax,deltax, &
+       call set_unifdis('hcp',id,master,xmin,xmax,ymin,ymax,zmin,zmax,deltax, &
                          hfact,npart,xyzh,nptot=npart_total)
     case default
        print*,' error: chosen lattice not available, using cubic'
diff --git a/src/setup/setup_shock.F90 b/src/setup/setup_shock.F90
index 2982b846..79c72333 100644
--- a/src/setup/setup_shock.F90
+++ b/src/setup/setup_shock.F90
@@ -545,7 +545,7 @@ subroutine choose_shock (gamma,polyk,dtg,iexist)
        use_dustfrac = .false.
     endif
     call prompt('Enter dust to gas ratio',dtg,0.)
-    call prompt('Enter constant drag coefficient',K_code,0.)
+    call prompt('Enter constant drag coefficient',K_code(1),0.)
  endif
 
  return
diff --git a/src/setup/setup_wave.f90 b/src/setup/setup_wave.f90
index 82199985..587a86fc 100644
--- a/src/setup/setup_wave.f90
+++ b/src/setup/setup_wave.f90
@@ -93,7 +93,7 @@ subroutine setpart(id,npart,npartoftype,xyzh,massoftype,vxyzu,polyk,gamma,hfact,
        endif
        if (use_dustfrac) K_code = 1000. ! for a more sensible better option
        call prompt('Enter dust to gas ratio',dtg,0.)
-       call prompt('Enter constant drag coefficient',K_code,0.)
+       call prompt('Enter constant drag coefficient',K_code(1),0.)
        if (use_dustfrac) then
           massfac = 1. + dtg
        else
diff --git a/src/tests/test_derivs.F90 b/src/tests/test_derivs.F90
index aa364888..e32874ba 100644
--- a/src/tests/test_derivs.F90
+++ b/src/tests/test_derivs.F90
@@ -2580,12 +2580,12 @@ real function ddustevol_func(xyzhi)
 
  tsi   = 0.
 #ifdef DUST
- call get_ts(idrag,grainsizek,graindensk,rhogasi,rhodusti,spsoundi,0.,tsi,iregime)
+ call get_ts(idrag,1,grainsizek,graindensk,rhogasi,rhodusti,spsoundi,0.,tsi,iregime)
  !
  ! grad(ts) = grad((1-eps)*eps*rho/K_code)
  !          = rho/K_code*(1-2*eps)*grad(eps)          ! note the absence of eps_k
  !
- gradts(:) = rhoi/K_code*(1. - 2.*dustfracisum)*gradsumeps(:)
+ gradts(:) = rhoi/K_code(1)*(1. - 2.*dustfracisum)*gradsumeps(:)
 #else
  gradts(:) = 0.
 #endif
@@ -2649,7 +2649,7 @@ real function dudtdust_func(xyzhi)
  tsi = 0.
 
 #ifdef DUST
- call get_ts(idrag,grainsizek,graindensk,rhogasi,rhodusti,spsoundi,0.,tsi,iregime)
+ call get_ts(idrag,1,grainsizek,graindensk,rhogasi,rhodusti,spsoundi,0.,tsi,iregime)
  if (iregime /= 0) stop 'iregime /= 0'
 #endif
  ! this is equation (13) of Price & Laibe (2015) except
@@ -2686,7 +2686,7 @@ real function deltavx_func(xyzhi)
  spsoundi   = gamma*pri/rhogasi
  tsi = 0.
 #ifdef DUST
- call get_ts(idrag,grainsizek,graindensk,rhogasi,rhodusti,spsoundi,0.,tsi,iregime)
+ call get_ts(idrag,1,grainsizek,graindensk,rhogasi,rhodusti,spsoundi,0.,tsi,iregime)
 #endif
  gradp = (gamma-1.)*(rhogasi*gradu - rhoi*uui*gradsumeps)
  deltavx_func = tsi*gradp/rhogasi
diff --git a/src/tests/test_dust.F90 b/src/tests/test_dust.F90
index c94c0f20..e82735cc 100644
--- a/src/tests/test_dust.F90
+++ b/src/tests/test_dust.F90
@@ -89,7 +89,7 @@ subroutine test_dust(ntests,npass)
  graindensi = 1./unit_density
  rhogasi  = 0.5*rhoi
  rhodusti = 0.5*rhoi
- call get_ts(idrag,grainsizei,graindensi,rhogasi,rhodusti,spsoundi,0.,tsi,iregime)
+ call get_ts(idrag,1,grainsizei,graindensi,rhogasi,rhodusti,spsoundi,0.,tsi,iregime)
  call checkval(iregime,1,0,nfailed(1),'deltav=0 gives Epstein drag')
  call update_test_scores(ntests,nfailed(1:1),npass)
 
@@ -293,10 +293,10 @@ subroutine test_dustybox(ntests,npass)
     call step(npart,npart,t,dt,dtext,dtnew)
     call compute_energies(t)
 
-    deltav = exp(-2.*K_code*t)
+    deltav = exp(-2.*K_code(1)*t)
     vg = 0.5*(1. - deltav)
     vd = 0.5*(1. + deltav)
-    fd = K_code*(vg - vd)
+    fd = K_code(1)*(vg - vd)
     do j=1,npart
        if (iamdust(iphase(j))) then
           call checkvalbuf(vxyzu(1,j),vd,tol,'vd',nerr(1),ncheck(1),errmax(1))
@@ -731,7 +731,7 @@ subroutine test_epsteinstokes(ntests,npass)
     do i=1,npts
        grainsizei = smin*10**((i-1)*ds)/udist
        !--no need to test drag transition 'ndusttypes' times...once is enough
-       call get_ts(idrag,grainsizei,graindensi,rhogas,0.,spsoundi,deltav**2,tsi,iregime)
+       call get_ts(idrag,1,grainsizei,graindensi,rhogas,0.,spsoundi,deltav**2,tsi,iregime)
        !print*,'s = ',grainsizei,' ts = ',tsi*utime/years,',yr ',iregime
 
        if (i > 1) call checkvalbuf((tsi-ts1)/abs(tsi),0.,tol,'ts is continuous into Stokes regime',nfailed(1),ncheck,errmax)
@@ -755,7 +755,7 @@ subroutine test_epsteinstokes(ntests,npass)
  if (write_output) open(unit=lu,file='ts-deltav.out',status='replace')
  do i=1,npts
     deltav = (smin + (i-1)*ds)*spsoundi
-    call get_ts(idrag,grainsizei,graindensi,rhogas,0.,spsoundi,deltav**2,tsi,iregime)
+    call get_ts(idrag,1,grainsizei,graindensi,rhogas,0.,spsoundi,deltav**2,tsi,iregime)
     psi = sqrt(0.5)*deltav/spsoundi
     if (i==1) then
        ts1 = tsi
