diff --git a/src/setup/setup_dustybox.f90 b/src/setup/setup_dustybox.f90
index f44574e1..33237dd7 100644
--- a/src/setup/setup_dustybox.f90
+++ b/src/setup/setup_dustybox.f90
@@ -23,30 +23,43 @@
 !+
 !--------------------------------------------------------------------------
 module setup
+ use dim, only:maxdustlarge
+
  implicit none
+
  public :: setpart
 
- integer, private :: npartx,ilattice
- real,    private :: deltax,polykset
  private
 
+ integer :: maxvxyzu
+ real    :: cs = 1.0
+
+ type fluid_params
+    integer :: npartx   = 64
+    real    :: rhozero  = 1.0
+    integer :: ilattice = 1
+ end type fluid_params
+
+ type (fluid_params) :: fluid_params_gas
+ type (fluid_params) :: fluid_params_dust(maxdustlarge)
+
 contains
 
 !----------------------------------------------------------------
 !+
-!  setup for uniform particle distributions
+!  setup for dustybox
 !+
 !----------------------------------------------------------------
-subroutine setpart(id,npart,npartoftype,xyzh,massoftype,vxyzu,polyk,gamma,hfact,time,fileprefix)
- use setup_params, only:rhozero,npart_total
- use io,           only:master
- use unifdis,      only:set_unifdis
- use boundary,     only:xmin,ymin,zmin,xmax,ymax,zmax,dxbound,dybound,dzbound
- use mpiutils,     only:bcast_mpi
- use part,         only:labeltype,set_particle_type,igas
- use physcon,      only:pi,solarm,au
+subroutine setpart(id,npart,npartoftype,xyzh,massoftype,vxyzu,polyk,gamma, &
+                   hfact,time,fileprefix)
+
+ use kernel,       only:hfact_default
+ use part,         only:igas,idust,ndustlarge
+ use physcon,      only:solarm,au
+ use setup_params, only:npart_total
+ use timestep,     only:tmax,dtmax
  use units,        only:set_units
- use prompting,    only:prompt
+
  integer,           intent(in)    :: id
  integer,           intent(inout) :: npart
  integer,           intent(out)   :: npartoftype(:)
@@ -56,121 +69,361 @@ subroutine setpart(id,npart,npartoftype,xyzh,massoftype,vxyzu,polyk,gamma,hfact,
  real,              intent(out)   :: polyk,gamma,hfact
  real,              intent(inout) :: time
  character(len=20), intent(in)    :: fileprefix
- real    :: totmass
- integer :: i,maxp,maxvxyzu
- integer :: itype,ntypes
- integer :: npart_previous
- logical, parameter :: ishift_box =.true.
-!
-! units (needed if physical drag is used)
-!
- call set_units(mass=solarm,dist=au,G=1.d0)
-!
-!--general parameters
-!
- time = 0.
- hfact = 1.2
+
+ integer :: idusttype
+
+ ! parameters
+ time  = 0.
+ hfact = hfact_default
  gamma = 1.
- rhozero = 1.
-!
-!--setup particles
-!
- maxp = size(xyzh(1,:))
+ tmax  = 0.1
+ dtmax = 0.001
+
+ ! get user defined parameters from setup file or interactively
+ call get_setup_parameters(id,fileprefix)
+
+ polyk = cs**2
+
+ ! units (needed if physical drag is used)
+ call set_units(mass=solarm,dist=au,G=1.d0)
+
  maxvxyzu = size(vxyzu(:,1))
+
+ ! setup particles
  npart = 0
  npart_total = 0
  npartoftype(:) = 0
 
- ntypes = 2
- overtypes: do itype=1,ntypes
-    if (id==master) then
-       if (itype==1) npartx = 64
-       if (ntypes > 1) then
-          print "(/,a,/)",'  >>> Setting up '//trim(labeltype(itype))//' particles <<<'
-       endif
-       call prompt('enter number of particles in x direction ',npartx,1)
-    endif
-    call bcast_mpi(npartx)
-    deltax = dxbound/npartx
-
-    if (id==master) call prompt(' enter density (gives particle mass)',rhozero,0.)
-    call bcast_mpi(rhozero)
-
-    if (itype==1) then
-       if (maxvxyzu < 4) then
-          if (id==master) then
-             polykset = 1.
-             call prompt(' enter sound speed in code units (sets polyk)',polykset,0.)
-          endif
-          call bcast_mpi(polykset)
-          polyk = polykset**2
-          print*,' polyk = ',polyk
+ ! set gas particles
+ call setpart_oftype(igas,id,npart,npart_total,npartoftype,xyzh,massoftype, &
+                     vxyzu,hfact,fluid_params_gas)
+
+ ! set dust particles
+ overdusttypes: do idusttype=1,ndustlarge
+    call setpart_oftype(idust+idusttype-1,id,npart,npart_total,npartoftype, &
+                        xyzh,massoftype,vxyzu,hfact,fluid_params_dust(idusttype))
+ enddo overdusttypes
+
+end subroutine setpart
+
+!----------------------------------------------------------------
+!+
+!  setup uniform particle distributions per itype
+!+
+!----------------------------------------------------------------
+subroutine setpart_oftype(itype,id,npart,npart_total,npartoftype,xyzh, &
+                          massoftype,vxyzu,hfact,params)
+
+ use boundary,  only:xmin,ymin,zmin,xmax,ymax,zmax,dxbound,dybound,dzbound
+ use io,        only:master
+ use part,      only:labeltype,set_particle_type,igas
+ use unifdis,   only:set_unifdis
+
+ integer,             intent(in)    :: id
+ integer,             intent(in)    :: itype
+ integer,             intent(inout) :: npart
+ integer(kind=8),     intent(inout) :: npart_total
+ integer,             intent(out)   :: npartoftype(:)
+ real,                intent(out)   :: xyzh(:,:)
+ real,                intent(out)   :: vxyzu(:,:)
+ real,                intent(out)   :: massoftype(:)
+ real,                intent(in)    :: hfact
+ type (fluid_params), intent(in)    :: params
+
+ logical, parameter :: ishift_box =.true.
+
+ integer :: i
+ integer :: npart_previous
+ real    :: totmass
+ real    :: deltax
+
+ npart_previous = npart
+
+ deltax = dxbound/params%npartx
+
+ select case(params%ilattice)
+ case(1)
+    if (ishift_box .eqv. .false.) then
+       call set_unifdis('cubic',id,master,xmin,xmax,ymin,ymax,zmin,zmax, &
+                        deltax,hfact,npart,xyzh,nptot=npart_total)
+    else
+       if (itype == igas) then
+          call set_unifdis('cubic',id,master,xmin,xmax,ymin,ymax,zmin,zmax, &
+                           deltax,hfact,npart,xyzh,nptot=npart_total)
        else
-          polyk = 0.
-          polykset = 0.
+          call set_unifdis('cubic',id,master, &
+                           xmin+0.01*deltax,xmax+0.01*deltax,ymin+0.05*deltax, &
+                           ymax+0.05*deltax,zmin+0.05*deltax,zmax+0.05*deltax, &
+                           deltax,hfact,npart,xyzh,nptot=npart_total)
+          ! Uncomment the following setup to how bad the spline is
+          !call set_unifdis('cubic',id,master, &
+          !                 xmin+0.5*deltax,xmax+0.5*deltax,ymin+0.5*deltax, &
+          !                 ymax+0.5*deltax,zmin+0.5*deltax,zmax+0.5*deltax, &
+          !                 deltax,hfact,npart,xyzh,nptot=npart_total)
        endif
     endif
+ case(2)
+    call set_unifdis('closepacked',id,master,xmin,xmax,ymin,ymax,zmin,zmax, &
+                     deltax,hfact,npart,xyzh,nptot=npart_total)
+ case default
+    print*,' error: chosen lattice not available, using cubic'
+    call set_unifdis('cubic',id,master,xmin,xmax,ymin,ymax,zmin,zmax,deltax, &
+                      hfact,npart,xyzh,nptot=npart_total)
+ end select
+
+ !--set which type of particle it is
+ do i=npart_previous+1,npart
+    call set_particle_type(i,itype)
+ enddo
+
+ do i=npart_previous+1,npart
+    if (itype==igas) then
+       vxyzu(1,i)   = 0.
+       vxyzu(2:3,i) = 0.
+    else
+       vxyzu(1,i)   = 1.
+       vxyzu(2:3,i) = 0.
+    endif
+ enddo
+
+ npartoftype(itype) = npart - npart_previous
+ print*,' npart = ',npart,npart_total
+
+ totmass = params%rhozero*dxbound*dybound*dzbound
+ massoftype(itype) = totmass/npartoftype(itype)
+ print*,' particle mass = ',massoftype(itype)
+
+end subroutine setpart_oftype
+
+!--------------------------------------------------------------------------
+!
+! Get setup parameters from interactive setup or file
+!
+!--------------------------------------------------------------------------
+subroutine get_setup_parameters(id,fileprefix)
+ use io, only:master
+ integer,           intent(in) :: id
+ character(len=20), intent(in) :: fileprefix
+
+ logical :: iexist
+ integer :: ierr
+ character(len=26) :: filename
+
+ filename = trim(fileprefix)//'.setup'
+ inquire(file=filename,exist=iexist)
+
+ if (iexist) then
+
+    call read_setupfile(filename,ierr)
+    if (id==master) call write_setupfile(filename)
+    if (ierr /= 0) then
+       stop
+    endif
 
+ elseif (id==master) then
+
+    print "(a,/)",' '//trim(filename)//' not found: using interactive setup'
+    call setup_interactive(id,filename)
+    stop
+
+ else
+
+    stop
+
+ endif
+
+end subroutine get_setup_parameters
+
+!--------------------------------------------------------------------------
+!
+! Interactive setup
+!
+!--------------------------------------------------------------------------
+subroutine setup_interactive(id,filename)
+ use io,        only:master
+ use mpiutils,  only:bcast_mpi
+ use part,      only:igas,idust,ndustlarge,labeltype
+ use prompting, only:prompt
+ integer, intent(in) :: id
+ character(len=26), intent(in) :: filename
+
+ integer :: itype
+ integer :: idusttype
+ real    :: polyk
+
+ ! set up gas properties
+ if (id==master) then
+    print "(/,a,/)",'  >>> Setting up '//trim(labeltype(igas))//' particles <<<'
+    call prompt('enter number of particles in x direction ',fluid_params_gas%npartx,1)
+ endif
+ call bcast_mpi(fluid_params_gas%npartx)
+
+ if (id==master) call prompt(' enter density (gives particle mass)', &
+                             fluid_params_gas%rhozero,0.)
+ call bcast_mpi(fluid_params_gas%rhozero)
+
+ if (maxvxyzu < 4) then
     if (id==master) then
-       ilattice = 1
-       call prompt(' select lattice type (1=cubic, 2=closepacked)',ilattice,1)
+       call prompt(' enter sound speed in code units (sets polyk)',cs,0.)
     endif
-    call bcast_mpi(ilattice)
+    call bcast_mpi(cs)
+    polyk = cs**2
+    print*,' polyk = ',polyk
+ else
+    polyk = 0.
+    cs = 0.
+ endif
 
-    npart_previous = npart
+ if (id==master) then
+    fluid_params_gas%ilattice = 1
+    call prompt(' select lattice type (1=cubic, 2=closepacked)',fluid_params_gas%ilattice,1)
+ endif
+ call bcast_mpi(fluid_params_gas%ilattice)
 
-    select case(ilattice)
-    case(1)
-       if (ishift_box .eqv. .false.) then
-          call set_unifdis('cubic',id,master,xmin,xmax,ymin,ymax,zmin,zmax,deltax, &
-                            hfact,npart,xyzh,nptot=npart_total)
-       else
-          if (itype == igas) then
-             call set_unifdis('cubic',id,master,xmin,xmax,ymin,ymax,zmin,zmax,deltax, &
-                               hfact,npart,xyzh,nptot=npart_total)
-          else
-             call set_unifdis('cubic',id,master,xmin+0.01*deltax,xmax+0.01*deltax,ymin+0.05*deltax, &
-                              ymax+0.05*deltax,zmin+0.05*deltax,zmax+0.05*deltax,deltax, &
-                              hfact,npart,xyzh,nptot=npart_total)
-             !call set_unifdis('cubic',id,master,xmin+0.5*deltax,xmax+0.5*deltax,ymin+0.5*deltax, &
-             !                  ymax+0.5*deltax,zmin+0.5*deltax,zmax+0.5*deltax,deltax, &
-             !                   hfact,npart,xyzh,nptot=npart_total)
-             !--Use this previous setup to how bad the spline is
-          endif
-       endif
-    case(2)
-       call set_unifdis('closepacked',id,master,xmin,xmax,ymin,ymax,zmin,zmax,deltax, &
-                         hfact,npart,xyzh,nptot=npart_total)
-    case default
-       print*,' error: chosen lattice not available, using cubic'
-       call set_unifdis('cubic',id,master,xmin,xmax,ymin,ymax,zmin,zmax,deltax, &
-                         hfact,npart,xyzh,nptot=npart_total)
-    end select
-
-    !--set which type of particle it is
-    do i=npart_previous+1,npart
-       call set_particle_type(i,itype)
-    enddo
-
-    do i=npart_previous+1,npart
-       if (itype==igas) then
-          vxyzu(1,i)   = 0.
-          vxyzu(2:3,i) = 0.
-       else
-          vxyzu(1,i)   = 1.
-          vxyzu(2:3,i) = 0.
-       endif
-    enddo
+ ! set up dust properties
+ if (id==master) then
+    print "(/,a,/)",'  >>> Setting up dust <<<'
+    ndustlarge = 1
+    call prompt('enter number of dust types ',ndustlarge,1,maxdustlarge)
+ endif
+
+ overdusttypes: do idusttype=1,ndustlarge
+    itype = idust+idusttype-1
+    if (id==master) then
+       print "(/,a,/)",'  >>> Setting up '//trim(labeltype(itype))//' particles <<<'
+       call prompt('enter number of particles in x direction ', &
+                   fluid_params_dust(idusttype)%npartx,1)
+    endif
+    call bcast_mpi(fluid_params_dust(idusttype)%npartx)
 
-    npartoftype(itype) = npart - npart_previous
-    print*,' npart = ',npart,npart_total
+    if (id==master) call prompt(' enter density (gives particle mass)', &
+                                fluid_params_dust(idusttype)%rhozero,0.)
+    call bcast_mpi(fluid_params_dust(idusttype)%rhozero)
 
-    totmass = rhozero*dxbound*dybound*dzbound
-    massoftype(itype) = totmass/npartoftype(itype)
-    print*,' particle mass = ',massoftype(itype)
+    if (id==master) then
+       fluid_params_dust(idusttype)%ilattice = 1
+       call prompt(' select lattice type (1=cubic, 2=closepacked)', &
+                   fluid_params_dust(idusttype)%ilattice,1)
+    endif
+    call bcast_mpi(fluid_params_dust(idusttype)%ilattice)
+ enddo overdusttypes
 
- enddo overtypes
+ ! write to file
+ call write_setupfile(filename)
+ print "(/,a)",' >>> please edit '//trim(filename)// &
+               ' to set parameters for your problem then rerun phantomsetup <<<'
 
-end subroutine setpart
+end subroutine setup_interactive
+
+!--------------------------------------------------------------------------
+!
+! Write setup file
+!
+!--------------------------------------------------------------------------
+subroutine write_setupfile(filename)
+ use fileutils,    only:make_tags_unique
+ use infile_utils, only:write_inopt
+ use part,         only:idust,ndustlarge
+ character(len=*),    intent(in) :: filename
+
+ integer, parameter :: iunit = 20
+
+ character(len=20) :: duststring(maxdustlarge)
+
+ integer :: i
+
+ print "(/,a)",' writing setup options file '//trim(filename)
+
+ open(unit=iunit,file=filename,status='replace',form='formatted')
+
+ write(iunit,"(a)") '# input file for dustybox setup routine'
+ write(iunit,"(a)") ''
+
+ write(iunit,"(a)") '# gas properties'
+ call write_inopt(cs,'cs','sound speed (sets polyk)',iunit)
+ call write_inopt(fluid_params_gas%npartx,'npartx_gas', &
+                  'number of particles in x direction',iunit)
+ call write_inopt(fluid_params_gas%rhozero,'rhozero_gas','initial density',iunit)
+ call write_inopt(fluid_params_gas%ilattice,'ilattice_gas', &
+                  'lattice type (1=cubic, 2=closepacked)',iunit)
+ write(iunit,"(a)") ''
+
+ write(iunit,"(a,i2,a)") '# dust properties'
+ call write_inopt(ndustlarge,'ndustlarge','number of dust species',iunit)
+ write(iunit,"(a)") ''
+
+ duststring = 'dust'
+ call make_tags_unique(ndustlarge,duststring)
+
+ overdusttypes: do i=1,ndustlarge
+    write(iunit,"(a,i2)") '# dust: ',i
+    call write_inopt(fluid_params_dust(i)%npartx,'npartx_'//trim(duststring(i)), &
+                     'number of particles in x direction',iunit)
+    call write_inopt(fluid_params_dust(i)%rhozero,'rhozero_'//trim(duststring(i)), &
+                     'initial density',iunit)
+    call write_inopt(fluid_params_dust(i)%ilattice,'ilattice_'//trim(duststring(i)), &
+                     'lattice type (1=cubic, 2=closepacked)',iunit)
+    write(iunit,"(a)") ''
+ enddo overdusttypes
+
+ close(iunit)
+
+end subroutine write_setupfile
+
+!--------------------------------------------------------------------------
+!
+! Read setup file
+!
+!--------------------------------------------------------------------------
+subroutine read_setupfile(filename,ierr)
+ use fileutils,    only:make_tags_unique
+ use infile_utils, only:open_db_from_file,inopts,read_inopt,close_db
+ use part,         only:idust,ndustlarge
+ character(len=*), intent(in)  :: filename
+ integer,          intent(out) :: ierr
+
+ type(inopts), allocatable :: db(:)
+ integer,      parameter   :: iunit = 21
+
+ character(len=20) :: duststring(maxdustlarge)
+
+ integer :: nerr
+ integer :: idusttype
+
+ nerr = 0
+
+ print "(a)",' reading setup options from '//trim(filename)
+
+ call open_db_from_file(db,filename,iunit,ierr)
+
+ call read_inopt(cs,'cs',db,errcount=nerr)
+ call read_inopt(fluid_params_gas%npartx,'npartx_gas',db,errcount=nerr)
+ call read_inopt(fluid_params_gas%rhozero,'rhozero_gas',db,errcount=nerr)
+ call read_inopt(fluid_params_gas%ilattice,'ilattice_gas',db,errcount=nerr)
+
+ call read_inopt(ndustlarge,'ndustlarge',db,errcount=nerr)
+
+ duststring = 'dust'
+ call make_tags_unique(ndustlarge,duststring)
+
+ overdusttypes: do idusttype=1,ndustlarge
+
+    call read_inopt(fluid_params_dust(idusttype)%npartx, &
+                    'npartx_'//trim(duststring(idusttype)),db,errcount=nerr)
+    call read_inopt(fluid_params_dust(idusttype)%rhozero, &
+                    'rhozero_'//trim(duststring(idusttype)),db,errcount=nerr)
+    call read_inopt(fluid_params_dust(idusttype)%ilattice, &
+                    'ilattice_'//trim(duststring(idusttype)),db,errcount=nerr)
+
+ enddo overdusttypes
+
+ call close_db(db)
+
+ ierr = nerr
+ if (nerr > 0) then
+    print "(1x,i2,a)",nerr,' error(s) during read of setup file: re-writing...'
+ endif
+
+end subroutine read_setupfile
 
 end module setup
